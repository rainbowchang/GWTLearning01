GWT 基础流程

系统定义两个接口：
@RemoteServiceRelativePath("greet")
public interface GreetingService extends RemoteService {
	String greetServer(String name) throws IllegalArgumentException;
}

public interface GreetingServiceAsync {
	void greetServer(String input, AsyncCallback<String> callback) throws IllegalArgumentException;
}

GreetingService实现了远程调用，而GreetingServiceAsync实现了异步响应。

客户端页面对两者做如下的预绑定
private final GreetingServiceAsync greetingService = GWT.create(GreetingService.class);

在需要调用的地方实现如下代码
			greetingService.greetServer(input, new AsyncCallback<String>() {
				@Override
				public void onFailure(Throwable caught) {
                    //TODO
				}
				@Override
				public void onSuccess(String result) {
                    //TODO
				}
			});
			
后台服务端实现如下的代码
public class GreetingServiceImpl extends RemoteServiceServlet implements GreetingService {

	public String greetServer(String input) throws IllegalArgumentException {
	    //TODO
	}
}



GWT对JSON的支持
如果仅仅是用于反序列化json字符串，可以用GWT Overlay Type方法：
	static class Customer extends JavaScriptObject {
		protected Customer() { }
		public final native String getFirstName() /*-{ return this.FirstName; }-*/;
		public final native String getLastName() /*-{ return this.LastName; }-*/;
		public final String getFullName() {
			return getFirstName() + " " + getLastName();
		}
	}
注意所有native的函数都要包含一个/*-{ sometine }-*/的实现，并且实现一个无参的构造函数。
在接收json字符串以后用
Customer c = JsonUtils.safeEval(result);得到一个json的dto对象，然后就可以像一般对象一样的进行读操作了。

如果要对json对象进行读写，序列化和反序列化，则可以考虑用另外一种方法GWT AutoBeanFactory:
定义一个DTO接口	
    public interface TInterface {
        public String getName();
        public void setName(String name);
    }
定义一个factory接口
	public interface MyFactory extends AutoBeanFactory {
		AutoBean<TInterface> test();
	}
生成factory对象 MyFactory factory = GWT.create(MyFactory.class);
生成DTO实例
	TInterface makeTest() {
        AutoBean<TInterface> test = factory.test();
        return test.as();
    }
在对象设置完成之后序列化的方法
    String serializeToJson(TInterface test) {
        // Retrieve the AutoBean controller
        AutoBean<TInterface> bean = AutoBeanUtils.getAutoBean(test);
        return AutoBeanCodex.encode(bean).getPayload();
    }
反序列化的方法
	TInterface deserializeFromJson(String json) {
        AutoBean<TInterface> bean = AutoBeanCodex.decode(factory, TInterface.class, json);
        return bean.as();
    }

控件：
按钮 com.google.gwt.user.client.ui.Button
添加点击事件addClickHandler(new com.google.gwt.event.dom.client.ClickHandler(){//TODO});

